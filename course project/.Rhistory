table(pred_rf, pred_gbm)
true_test <- testing$diagnosis
pred_rf <- predict(modFit_rf, testing)
true_test <- testing$diagnosis
table(pred_rf, true_test)
results <- cbind(pred_rf, true_test)
accuracy <- function(dataset, testing_dataset, yvariable, modelname)
for (i in length(dataset) {
values = testing_dataset$yvariable
prediction = predict(modelname, testing_dataset)
cbindvalues <- as.data.frame(cbind(values, prediction))
equalvalues <- filter(cbindvalues, values == prediction)
}
accuracy <- function(dataset, testing_dataset, yvariable, modelname)
for (i in length(dataset)) {
values = testing_dataset$yvariable
prediction = predict(modelname, testing_dataset)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
}
accuracy <- function(dataset, testing_dataset, yvariable, modelname)
{
values = testing_dataset$yvariable
prediction = predict(modelname, testing_dataset)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
}
accuracy <- function(testing_dataset, yvariable, modelname)
{
values = testing_dataset$yvariable
prediction = predict(modelname, testing_dataset)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
}
accuracy(testing, diagnosis, modFit_rf)
accuracy(testing, diagnosis, modFit_rf)
library(dplyr)
library(dplyr)
library(dplyr)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFit_rf <- train(diagnosis~.,method= "rf", data = training)
print(modFit_rf$finalModel)
pred_rf <- predict(modFit_rf, testing)
accuracy <- function(testing_dataset, yvariable, modelname) {
values = testing_dataset$yvariable
prediction = predict(modelname, testing_dataset)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
rownum(equalvalues)
}
modFit_gbm <- train(diagnosis~., method = "gbm", data = training, verbose = FALSE)
accuracy(testing, diagnosis, modFit_rf)
accuracy(testing, diagnosis, modFit_rf)
accuracy <- function(testing_dataset, yvariable, modelname) {
values = as.numeric(as.character(testing_dataset$yvariable))
prediction = predict(modelname, testing_dataset)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
rownum(equalvalues)
}
accuracy(testing, diagnosis, modFit_rf)
accuracy(testing, diagnosis, modFit_rf)
accuracy <- function(testing_dataset, yvariable, modelname) {
values = as.numeric(as.character(testing_dataset$yvariable))
prediction = as.numeric(as.character(predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
rownum(equalvalues)
}
accuracy <- function(testing_dataset, yvariable, modelname) {
values = as.numeric(as.character(testing_dataset$yvariable))
prediction = as.numeric(as.character(predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
##rownum(equalvalues)
}
accuracy <- function(testing_dataset, yvariable, modelname) {
values = as.numeric(as.character(testing_dataset$yvariable))
prediction = as.numeric(as.character(predict(modelname, testing_dataset)))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
##rownum(equalvalues)
}
accuracy(testing, diagnosis, modFit_rf)
values = as.numeric(as.character(testing$diagnosis))
values = testing$diagnosis
values = as.numeric(as.character(testing$diagnosis))
values = (testing$diagnosis)
prediction = predict(modFit_rf,testing)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
rownum(equalvalues)
sum(length(equalvalues))
length(equalvalues)
width(equalvalues)
nrow(equalvalues)
denominator = nrow(testing_dataset)
accuracy <- function(testing_dataset, yvariable, modelname) {
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
numerator = nrow(equalvalues)
denominator = nrow(testing_dataset)
accuracyforModel = numerator/denominator
}
accuracy(testing, diagnosis, modFit_rf)
values = (testing$diagnosis)
pred_rf <- predict(modFit_rf, testing)
prediction = predict(modFit_rf,testing)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
numerator = nrow(equalvalues)
denominator = nrow(cbindvalues)
accuracyforModel = numerator/denominator
accuracy(testing, diagnosis, modFit_rf)
accuracy(testing, diagnosis, modFit_rf)
accuracy <- function(testing_dataset, yvariable, modelname) {
library(dplyr)
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
numerator = nrow(equalvalues)
denominator = nrow(cbindvalues)
accuracyforModel = numerator/denominator
}
accuracy(testing, diagnosis, modFit_rf)
accuracy <- function(testing_dataset, yvariable, modelname) {
library(dplyr)
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
}
accuracy(testing, diagnosis, modFit_rf)
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
accuracyforModel2
accuracy <- function(testing_dataset, yvariable, modelname) {
library(dplyr)
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
}
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
accuracy <- function(testing_dataset, yvariable, modelname) {
library(dplyr)
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = filter(cbindvalues, values == prediction)
}
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
accuracy <- function(testing_dataset, yvariable, modelname) {
library(dplyr)
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = dplyr::filter(cbindvalues, values == prediction)
}
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
equalvalues = cbindvalues[values == prediction,]
accuracy <- function(testing_dataset, yvariable, modelname) {
library(dplyr)
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
}
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
accuracyforModel2
equalvalues = cbindvalues[values == prediction,]
numerator = nrow(equalvalues)
denominator = nrow(cbindvalues)
accuracyforModel = numerator/denominator
accuracy <- function(testing_dataset, yvariable, modelname) {
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = nrow(equalvalues)
denominator = nrow(cbindvalues)
accuracyforModel = numerator/denominator
}
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
accuracyforModel2
numerator = as.numeric(nrow(equalvalues))
accuracy <- function(testing_dataset, yvariable, modelname) {
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = as.numeric(nrow(equalvalues))
denominator = as.numeric(nrow(cbindvalues))
accuracyforModel = numerator/denominator
}
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
accuracyforModel2
denominator = as.numeric(nrow(cbindvalues))
numerator = as.data.frame(as.numeric(nrow(equalvalues)))
denominator = as.data.frame(as.numeric(nrow(cbindvalues)))
View(denominator)
accuracyforModel = numerator/denominator
View(accuracyforModel)
accuracy <- function(testing_dataset, yvariable, modelname) {
values = (testing_dataset$yvariable)
prediction = (predict(modelname, testing_dataset))
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = as.data.frame(as.numeric(nrow(equalvalues)))
denominator = as.data.frame(as.numeric(nrow(cbindvalues)))
accuracyforModel = numerator/denominator
}
accuracyforModel2 = accuracy(testing, diagnosis, modFit_rf)
accuracyforModel2
modFit_lda <- train(diagnosis~., method = "lda", data = training)
print(modFit_lda)
pred_lda <- predict(modFit_lda, testing)
cbindagain = cbind(numerator,denominator)
View(cbindagain)
cbindagain2 = cbindagain$numerator/cbindagain$denominator
values = (testing$diagnosis)
prediction = predict(modFit_rf,testing)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = (nrow(equalvalues)))
denominator = (nrow(cbindvalues)))
numerator = (nrow(equalvalues))
denominator = (nrow(cbindvalues))
answer = numerator/denominator
answer
pred_gbm <- predict(modFit_gbm, testing)
values = (testing$diagnosis)
prediction = predict(modFit_gbm,testing)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = (nrow(equalvalues))
denominator = (nrow(cbindvalues))
answer = numerator/denominator
answer
prediction = predict(modFit_lda,testing)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = (nrow(equalvalues))
denominator = (nrow(cbindvalues))
answer = numerator/denominator
answer
prediction = predict(modFit_lda,testing)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = (nrow(equalvalues))
denominator = (nrow(cbindvalues))
answer = numerator/denominator
answer
predDF <- data.frame(pred_rf, pred_gbm,pred_lda, ydiagnosis = testing$diagnosis)
combinedModFit <- traing(diagnosis~., method = "gam",data=predDF)
predDF <- data.frame(pred_rf, pred_gbm,pred_lda, diagnosis = testing$diagnosis)
combinedModFit <- train(diagnosis~., method = "gam",data=predDF)
predDF <- data.frame(pred_rf, pred_gbm,pred_lda, diagnosis = testing$diagnosis)
combinedModFit <- train(diagnosis~., method = "gam", data=predDF)
combPred <- predict(combModFit, predDF)
combPred <- predict(combinedModFit, predDF)
values = (testing$diagnosis)
prediction = predict(combinedModFit,predDF)
cbindvalues = as.data.frame(cbind(values, prediction))
equalvalues = cbindvalues[values == prediction,]
numerator = (nrow(equalvalues))
denominator = (nrow(cbindvalues))
answer = numerator/denominator
answer
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit_lda <- train(CompressiveStrength~., method = "lasso", data = training)
modFit_lasso <- train(CompressiveStrength~., method = "lasso", data = training)
print(modFit_lda)
print(modFit_lasso)
pred_lda <- predict(modFit_lasso, testing)
?plot.enet
209/324
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit_lasso <- train(CompressiveStrength~., method = "lasso", data = training)
print(modFit_lasso)
pred_lda <- predict(modFit_lasso, testing)
?plot.enet
?plot.enet
print(modFit_lasso)
object <- enet(modFit_lasso, testing)
object <- enet(modFit_lasso)
object <- enet(modFit_lasso, "fraction")
object <- enet(modFit_lasso, xvar = "fraction")
object <- enet(modFit_lasso)
data(diabetes)
attach(diabetes)
object <- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
detach(diabetes)
object <- enet(modFit_lasso)
pred_lda <- predict(modFit_lasso, testing)
object <- as.dataframe(enet(x,y,lambda=1))
object <- as.data.frame(enet(x,y,lambda=1))
object <- (enet(x,y,lambda=1))
object <- enet(x,y,lambda=1)
attach(diabetes)
object <- enet(x,y,lambda=1)
object <- as.data.frame(enet(x,y,lambda=1))
object <- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
209/324
print(modFit_lasso)
?plot.enet
attach(concrete)
object<- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
attach(concrete)
object<- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
View(diabetes)
View(diabetes)
install.packages("e1071")
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?e1071
??e1071
svm.model <- svm(Compressive_Strengh ~., data = training)
svm.model <- svm(concrete$Compressive_Strengh ~., data = training)
View(concrete)
svm.model <- svm(CompressiveStrengh ~., data = training)
svm.model <- svm(CompressiveStrength ~., data = training)
print(svm.model)
pred_svm <- predict(svm.model, testing)
svm.model
error <- concrete$CompressiveStrength - pred_svm
error <- testing$CompressiveStrength - pred_svm
svmPredictionRMSE <- rmse(error)
svmPredictionRMSE <- rmse(error)
??rmse
svmPredictionRMSE <- RMSE(error)
error <- testing$CompressiveStrength - pred_svm
svmPredictionRMSE <- rmse(error)
??rmse
?rmse
??rmse
library(e1071)
library(caret)
svmPredictionRMSE <- rmse(error)
rmse <- function(error)
{
sqrt(mean(error^2))
}
svmPredictionRMSE <- rmse(error)
svmPredictionRMSE
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("~/Desktop/gaData.csv")
getwd
getwd()
dat = read.csv("C:/Users/Calli6/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
?bats
View(dat)
View(training)
tstrain
training
forecastModel <- bats(visitsTumblr, training)
forecastModel <- bats(training$visitsTumblr)
forecastpred <- predict(forecastModel, testing)
forecastpred <- predict(forecastModel, testing$visitsTumblr)
forecastpred <- predict(forecastModel, testing)
forecastModel
forecastModel <- bats(training)
forecastModel <- bats(tstrain)
forecastModel
forecastpred <- predict(forecastModel, testing)
tstraintest =ts(testing$visitsTumblr)
forecastpred <- predict(forecastModel, tstraintest)
forecastpred <- predict(forecastModel, testing$visitsTumblr)
forecastpred <- forecast(forecastModel, testing)
forecastpred <- forecast(forecastModel, tstraintest)
forecastModel <- bats(tstrain)
forecastpred <- forecast(forecastModel, level = .95)
forecastModel
predict(forecastModel, testing, level = .95)
predict(forecastModel, tstraintest, level = .95)
tstraintest =ts(testing$visitsTumblr)
forecastpred <- forecast(forecastModel, tstraintest, level = .95)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(Rcharts)
library(rcharts)
install.packages("rcharts")
library(rcharts)
install.packages(rcharts)
install.packages(rCharts)
library(shiny)
?predict
?lm
?predict
mean
print
predict
dgamma
colSums
show
mean
print
predict
dgamma
colSums
show
getmethod(colSums)
getS3method(mean)
getS3method(mean, default)
getS3method("mean", "default")
install.packages("shiny")
library(shiny)
deployApp(appName="Affairs")
library(devtools)
library(rsconnect)
deployApp(appName="Affairs")
getwd()
setwd("C:/Users/Calli6/Desktop/Data Products/Course Project")
deployApp(appName="Affairs")
library(rsconnect)
library(devtools)
getwd()
setwd("C:/Users/Calli6/Desktop/Data Products/Course Project")
deployApp(appName="Affairs")
deployApp(appName="Affairs")
deployApp(appName="Affairs")
deployApp(appName="Affairs")
deployApp(appName="Affairs")
setwd("C:/Users/Calli6/Desktop/Data Products/Course Project")
deployApp(appName="Affairs")
setwd("C:/Users/Calli6/Desktop/Data Products/Course Project")
deployApp(appName="Affairs")
getwd()
library(shiny)
runApp(display.mode = 'showcase')
library(markdown)
library(rsconnect)
deployApp(appName="Affairs")
runApp(display.mode = 'showcase')
deployApp(appName="Affairs")
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
setwd("C:/Users/Calli6/Desktop/Data Products/course Project")
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
deployApp(appName="Affairs")
deployApp(appName="Affairs")
runApp(display.mode = 'showcase')
deployApp(appName="Affairs")
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
deployApp(appName="Affairs")
deployApp(appName="Affairs")
